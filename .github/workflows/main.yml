name: main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: Application version to use when publishing the project
        required: false

env:
  # Setting these variables allows .NET CLI to use rich color codes in console output
  TERM: xterm
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  # Skip boilerplate output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

# Note that as much as we'd love to avoid repetitive work, splitting the pipeline into separate jobs
# makes it very difficult to share artifacts between them. Even if we succeed, we'll still end up
# pushing and pulling gigabytes worth of data, which makes the jobs so much slower that we might as
# well just repeat the checkout-restore-build steps instead.

# Having a setup that involves separate jobs gives us significant benefits, on the other hand, namely:
# - Most of the jobs can run in parallel, which reduces the overall execution time significantly,
#   despite the repetitive work.
# - We can catch more issues this way, for example if the formatting job fails, we can still see the
#   the test results too.
# - If one of the jobs fails due to reasons unrelated to our code (e.g. NuGet server is down), we get
#   the option to rerun only that job, saving us time.
# - It's easier to understand what each job does (and later, read its output) because the scope is much
#   more narrow.
# - We can set permissions on a more granular (per-job) level, which allows us to expose only a few select
#   steps to more sensitive access scopes.

jobs:
  # Determine version
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Determine stable version
        id: stable-version
        if: ${{ inputs.version || github.event_name == 'release' }}
        run: |
          version="${{ inputs.version || github.event.release.tag_name }}"
          
          if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z].*)?$ ]]; then
              echo "Invalid version: $version"
              exit 1
          fi
          
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Determine prerelease version
        id: pre-version
        run: |
          hash="${{ github.event.pull_request.head.sha || github.sha }}"
          echo "version=0.0.0-ci-${hash:0:7}" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.stable-version.outputs.version || steps.pre-version.outputs.version }}

  # Check formatting
  format:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install .NET
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Validate format
        run: dotnet format --verify-no-changes

  # Run tests
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install .NET
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Run restore
        run: dotnet restore

      - name: Run build
        run: >
          dotnet build
          --no-restore
          --configuration Release

      - name: Run tests
        # The next step will fail if any tests fail, but we still want to publish the results
        continue-on-error: true
        run: >
          dotnet test
          --no-restore
          --no-build
          --configuration Release
          --logger "trx;LogFileName=pw-test-results.trx"
          --collect:"XPlat Code Coverage"
          --
          RunConfiguration.CollectSourceInformation=true
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Report test results
        uses: dorny/test-reporter@afe6793191b75b608954023a46831a3fe10048d4 # v1.7.0
        with:
          name: Test Results
          path: "**/*-test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: Upload coverage
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4

  # Publish the apps
  pack:
    needs: version

    strategy:
      matrix:
        app:
          - Api
          - AdminConsole

    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install .NET
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0

      - name: Install NodeJS
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
        with:
          node-version: lts/*

      - name: Publish app
        run: >
          dotnet publish src/${{ matrix.app }}/
          -p:Version=${{ needs.version.outputs.version }}
          --configuration Release
          --runtime win-x86
          --no-self-contained
          --output src/${{ matrix.app }}/publish/

      - name: Upload artifacts
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
        with:
          name: ${{ matrix.app }}
          path: src/${{ matrix.app }}/publish/

  # Deploy the apps
  deploy:
    # Don't run this job for PRs
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - version
      - format
      - test
      - pack

    strategy:
        matrix:
          app:
            - Api
            - AdminConsole

    environment: devtest-${{ matrix.app }}
    concurrency: devtest-${{ matrix.app }}

    runs-on: ubuntu-latest
    permissions:
      actions: read
      deployments: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@f44cd7b40bfd40b6aa1cc1b9b5b7bf03d3c67110 # v4.1.0
        with:
          name: ${{ matrix.app }}
          path: ${{ matrix.app }}/

      - name: Set DataDog version
        run: >
          cat <<<
          $(jq '.DD_VERSION = "${{ needs.version.outputs.version }}"' ${{ matrix.app }}/datadog.json)
          > ${{ matrix.app }}/datadog.json

      - name: Push app
        uses: azure/webapps-deploy@145a0687697df1d8a28909569f6e5d86213041f9 # v3.0.0
        with:
          app-name: ${{ env.AZURE_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_APP_PUBLISH_PROFILE  }}
          package: ${{ matrix.app }}

  # Notify the Slack channel about the release
  notify:
    if: ${{ github.event_name == 'release' }}
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Send Slack message
        uses: tyrrrz/action-http-request@64c70c67f5ebc54d4c7ea09cbe3553322778afd5 # v1.1.2
        with:
          url: ${{ secrets.SLACK_WEBHOOK_URL }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "text": "*Passwordless-server* version `${{ github.event.release.name }}` has been released! ðŸŽ‰\nDetails: ${{ github.event.release.html_url }}"
            }
