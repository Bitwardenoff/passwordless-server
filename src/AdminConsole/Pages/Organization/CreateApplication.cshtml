@page
@using Microsoft.Extensions.Options
@using Passwordless.AdminConsole.Services.PasswordlessManagement
@inject IOptions<PasswordlessManagementOptions> Options
@model Passwordless.AdminConsole.Pages.Organization.CreateApplicationModel

@{
    ViewData["Title"] = "New App";
}

<Feedback name="_error" LinkUrl="@Url.PageLink("/Billing/Manage")" LinkText="Upgrade" asp-if="!Model.CanCreateApplication"
          message="You need to upgrade to a paid organization to create more applications" />
<div id="app" class="sm:w-full sm:max-w-md">
    <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form class="space-y-6" action="" method="POST">
            <div>
                <label asp-for="Form.Name" class="block text-sm font-medium leading-6 text-gray-900">Application name</label>
                <div class="mt-2">
                    <input asp-for="Form.Name" v-model="appId" type="text"
                           class="px-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <div v-cloak :class="{ invisible: !appId }" class=" small">
                        <input asp-for="Form.Id" type="hidden" :value="parsedAppId"/>
                        Your app id is:
                        <span
                            class="parsed_tenant_name">
                            {{
                            parsedAppId
                            }}
                        </span>
                        <span v-if="availability == 'available'"> ✅ Available</span>
                        <span v-if="availability == 'not-available'"> ⚠️ Unavailable</span>

                    </div>
                    <span asp-validation-for="Form.Name"></span>
                </div>
            </div>

            <div>
                <label asp-for="Form.Description" class="block text-sm font-medium leading-6 text-gray-900">Description</label>
                <div class="mt-2">
                    <input type="text" asp-for="Form.Description"
                           class="px-2 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                    <span asp-validation-for="Form.Description"></span>
                </div>
            </div>

            <div>
                <div asp-validation-summary="All"></div>
                <button type="submit"
                        :disabled="availability !== 'available'"
                        class="flex w-full justify-center rounded-md bg-primary-500 py-2 px-3 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600">
                    Create
                </button>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @* @{await Html.RenderPartialAsync("_ValidationScriptsPartial");} *@
    <script type="module">
    import { createApp, computed, ref, watch } from 'vue';

    createApp({
        setup() {
            const appId = ref("");
            const availability = ref("");

            const parsedAppId = computed(() => {
                // parse string to to be alphanumeric and start with a letter. Between 3 - 50 length
                let clean = appId.value.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
                if (clean.length < 1)
                    return '';

                let firstChar = clean.charAt(0);
                if (!firstChar.match(/[a-z]/i)) {
                    firstChar = "x"
                }

                return firstChar + clean.slice(1);
            });

            const checkAvailability = async (appId) => {
                var res = await fetch("@Options.Value.ApiUrl/apps/available", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ appId: appId }),
                });
                return res.ok;
            }

            watch(appId, async () => {
                const available = await checkAvailability(parsedAppId.value);
                availability.value = available ? "available" : "not-available";
            })

            return {
                appId,
                availability,
                parsedAppId
            }
        }
    }).mount("#app")
</script>
}