@page "/settings"
@model SettingsModel

@{
    ViewData["Title"] = "Settings";
}

<panel header="Plan">
    <p>The plan you select for this app changes the pricing and features available.</p>
    <div class="gap-4 grid sm:grid-cols-1 md:grid-cols-3">
        @foreach (var plan in Model.Plans)
        {
            <div class="@(plan.IsActive ? "pricing-card-active" : "pricing-card")">
                <div class="flex flex-wrap items-center justify-center">
                    @if (plan.IsActive)
                    {
                        if (plan.IsOutdated)
                        {
                            <badge variant="ColorVariant.Warning" text="New Available"></badge>
                        }
                        else
                        {
                            <badge variant="ColorVariant.Primary" text="Active"></badge>
                        }
                    }
                    else
                    {
                        <badge class="invisible" text="Inactive"></badge>
                    }
                </div>
                <h3 class="text-center">@plan.Label</h3>
                <div class="space-y-0">
                    <p class="text-lg font-black text-center">@plan.Price</p>
                    <p class="text-sm text-gray-600 text-center">per user per month@(!string.IsNullOrEmpty(plan.PriceHint) ? "*" : string.Empty)</p>
                </div>
                <div class="flex-1">
                    <ul class="mt-4 space-y-2">
                        @foreach (var feature in plan.Features)
                        {
                            <li class="flex items-start">
                                <feature-list-item-icon class="flex-shrink-0 w-5 h-5 mr-2"></feature-list-item-icon>
                                @feature
                            </li>
                        }
                    </ul>
                </div>
                <div asp-if="!string.IsNullOrEmpty(plan.PriceId)" class="mt-auto text-center space-y-4">
                    <p asp-if="!string.IsNullOrEmpty(plan.PriceHint)" class="text-xs text-gray-600 text-center">* @(plan.PriceHint)</p>
                    @if (plan.CanSubscribe)
                    {
                        <form method="post" asp-page-handler="Cancel">
                            <input type="hidden" name="selectedPlan" value="@plan.Value"/>
                            <button asp-page-handler="ChangePlan" type="submit" class="btn-primary">Subscribe</button>
                        </form>
                    }
                </div>
            </div>
        }
    </div>
</panel>

<div class="panel">
    <h2>Api Keys</h2>
    <div class="flex space-x-4">
        <a
            id="create-public-key-btn"
            class="btn-primary"
            asp-page="/App/Settings/CreatePublicKey"
            asp-route-app="@Model.ApplicationId">
            Create Public Key
        </a>
        <a
            id="create-secret-key-btn"
            class="btn-primary"
            asp-page="/App/Settings/CreateSecretKey"
            asp-route-app="@Model.ApplicationId">
            Create Secret Key
        </a>
    </div>

    <div class="panel-content">
        <div class="table-container">
            <table class="tbl-default min-w-full">
                <thead>
                <tr>
                    <th>Api Key</th>
                    <th>Type</th>
                    <th>Locked</th>
                    <th>Scopes</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @if (!Model.ApiKeys.Any())
                {
                    <tr>
                        <td colspan="5">This application has no API Keys or API Secrets.</td>
                    </tr>
                }
                else
                {
                    @foreach (var apiKey in Model.ApiKeys)
                    {
                        <tr>
                            <td>@apiKey.Value</td>
                            <td>@apiKey.Type</td>
                            @if (apiKey.IsLocked)
                            {
                                <td>Yes (<asp-local-time datetime="apiKey.LastLockedAt!.Value"></asp-local-time>)</td>
                            }
                            else
                            {
                                <td>No</td>
                            }
                            <td>@apiKey.Scopes</td>
                            <td class="flex space-x-2">
                                @if (apiKey.IsLocked)
                                {
                                    <form method="post" asp-page-handler="UnlockApiKey">
                                        @Html.Hidden(SettingsModel.SelectedApiKeyIdField, apiKey.Id)
                                        <button class="btn-warning">
                                            <component type="typeof(UnlockIcon)" render-mode="Static" param-Class="@("h-6 w-6")"/>
                                        </button>
                                    </form>

                                }
                                else
                                {
                                    if (apiKey.CanLock)
                                    {
                                        <form method="post" asp-page-handler="LockApiKey">
                                            @Html.Hidden(SettingsModel.SelectedApiKeyIdField, apiKey.Id)
                                            <button class="btn-warning">
                                                <component type="typeof(LockIcon)" render-mode="Static" param-Class="@("h-6 w-6")"/>
                                            </button>
                                        </form>
                                    }
                                }
                                @if (apiKey.CanDelete)
                                {
                                    <form method="post" asp-page-handler="DeleteApiKey">
                                        @Html.Hidden(SettingsModel.SelectedApiKeyIdField, apiKey.Id)
                                        <button class="btn-danger">
                                            <component type="typeof(DeleteIcon)" render-mode="Static" param-Class="@("h-6 w-6")"/>
                                        </button>
                                    </form>
                                }
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<panel header="Delete Application">
    @if (Model.PendingDelete)
    {
        <form method="post" asp-page-handler="Cancel">
            <danger-alert-box message="'@Model.ApplicationId' will be deleted on '@Model.DeleteAt?.ToString("g") UTC'. If you would like to cancel this action, click 'Cancel'."></danger-alert-box>
            <button id="btn-cancel-delete" class="btn-secondary mt-3" type="submit">Cancel</button>
        </form>
    }
    else
    {
        <form method="post" asp-page-handler="Delete">
            <p>
                If your app contains no credentials or was newly created, <strong>the app will be deleted immediately</strong>.
            </p>
            <p class="">If your app <strong>does contain credentials</strong>, the following will happen once you choose to delete the application:</p>
    
            <ul role="list" class="list-decimal list-inside my-2">
                <li class="">No data will be deleted immediately.</li>
                <li>Your API Keys will be frozen - meaning no authentication calls can be made.</li>
                <li>Admins can cancel the process at any time. The API will return to normal behavior.</li>
                <li>If the process has not been aborted within 30 days, data will be deleted permanently.</li>
            </ul>
    
            <div id="deleteApplication"></div>
    
        </form>
    }
</panel>

@section Scripts
{
    <script type="module">
    import { createApp } from 'vue';
    import DeleteApplication from '@Url.Content("~/js/deleteapplication.mjs")';

    createApp(DeleteApplication, {
        appId: "@(Model.ApplicationId)"
    }).mount('#deleteApplication');

    </script>
}
