@page "/settings"
@model AdminConsole.Pages.Settings.SettingsModel
@{
    ViewData["Title"] = "Settings";
}


<h2 class="h2">Plan</h2>
<p class="">The plan you select for this app changes the pricing and features available.</p>
<p>Please see our <a class="link-blue" href="https://bitwarden.com/products/passwordless/#pricing" target="_blank">Pricing pages</a> or visit our <a class="link-blue" href="@Url.Page("/Billing/Manage")">Billing page</a> to upgrade to Pro.</p>

<form method="post" asp-page-handler="billing">
    <div id="planpicker"></div>
    @* <button class="btn-primary mt-3">Save billing</button> *@
</form>

<br />

<h2 class="h2">Delete Application : @(Model.ApplicationId)</h2>
@if (Model.PendingDelete)
{
    <form method="post" class="mt-3" asp-page-handler="Cancel">
        <p>@Model.ApplicationId will be deleted on @(Model.DeleteAt). If you would like to cancel this action, click "Cancel".</p>
        <button id="btn-cancel-delete" class="btn-danger" type="submit">Cancel</button>
    </form>
}
else
{
    <form method="post" class="mt-3" asp-page-handler="Delete">
        <p>
            Newly created applications will be deleted automatically provided they have no credentials stored in them. Otherwise,
            they will be flagged for deletion by the system and administrators of the organization will be notified. After a specified amount of time,
            the application and all credentials/users/etc. will be removed from the system. If you would like to cancel this action,
            you have until the end of the specified time to do so. A button will be provided here and a notification email with
            a link will be emailed to the organization administrators.
        </p>
        <div id="deleteApplication"></div>
    </form>
}

@section Scripts
{
    <script type="module">
    import { createApp } from 'vue';
    import RadioBoxes from '@Url.Content("~/js/radioboxes.mjs")';
    import DeleteApplication from '@Url.Content("~/js/deleteapplication.mjs")';

    const items = [
    {
        title: 'Free',
        desc: 'Passkeys for your users and customers. Up to 10,000 users.',
        disabled: @Model.Organization.HasSubscription.ToString().ToLower()
    },
    {
        title: 'Pro',
        desc: 'Passkeys for your users and customers. Fewer limits, more power.',
        disabled: @((!Model.Organization.HasSubscription).ToString().ToLower())
    },
    {
        title: 'Enterprise',
        desc: 'Passkeys for your workforce. Please contact us for more information.',
        disabled: true
    }];   
    
    createApp(RadioBoxes, {
        items: items  
    } ).mount('#planpicker');
    
    createApp(DeleteApplication, {
        appId: "@(Model.ApplicationId)"
    }).mount('#deleteApplication');
    
    </script>
}