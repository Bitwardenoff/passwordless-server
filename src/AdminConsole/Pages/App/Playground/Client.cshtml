@page "/playground"
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Antiforgery
@model ClientModel
@inject IOptionsSnapshot<PasswordlessOptions> passwordlessOptions
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Playground";
    var requestToken = Antiforgery.GetAndStoreTokens(Model.HttpContext).RequestToken;
}

<div id="xapp" class="flex flex-col gap-10">
    <div class="flex flex-1 flex-col justify-center lg:flex-none bg-gray-200 rounded-md p-6 max-w-fit">
        <div class="w-full max-w-sm lg:w-96">
            <div>
                <h2 class="text-2xl font-bold tracking-tight text-gray-900">Sign in to your account</h2>
                <p class="mt-2 text-sm text-gray-600">
                    Don't have an account?
                    <a asp-page="newAccount" class="font-medium text-primary-500 hover:text-blue-500">Create account</a>
                </p>
            </div>

            <div class="mt-8">
                <div class="mt-6">
                    <form v-on:submit.prevent="loginSubmit" href="#" name="signin" method="post" class="space-y-6">
                        <div>
                            <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address / username</label>
                            <div class="mt-2">
                                <input id="alias" name="alias" type="text" autocomplete="webauthn" required class="block w-full p-2 rounded-md border-0 py-1.5 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary-500 sm:text-sm sm:leading-6">
                            </div>
                        </div>

                        <div>
                            <button type="submit" class="flex w-full justify-center rounded-md bg-primary-500 py-2 px-3 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-500">Sign in</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div v-cloak>
        @* <h2 class="mt-10 mb-4 text-2xl font-bold tracking-tight text-gray-900">Successful sign ins</h2> *@
        <div v-if="signins.length > 0" v-for="item in signins" class="overflow-hidden bg-white shadow sm:rounded-lg mb-4">
            <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                <dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                    <div v-for="(value, name) in item" class="sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">{{ name }}</dt>
                        <dd class="mt-1 text-sm text-gray-900 font-mono">{{ value || '-' }}</dd>
                    </div>
                </dl>
            </div>
        </div>
        <div v-if="signins.length == 0" class="relative block w-full rounded-lg border-2 border-dashed border-gray-400 p-12 text-center max-w-lg">
            @* <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 14v20c0 4.418 7.163 8 16 8 1.381 0 2.721-.087 4-.252M8 14c0 4.418 7.163 8 16 8s16-3.582 16-8M8 14c0-4.418 7.163-8 16-8s16 3.582 16 8m0 0v14m0-4c0 4.418-7.163 8-16 8S8 28.418 8 24m32 10v6m0 0v6m0-6h6m-6 0h-6" />
        </svg> *@
            <svg class="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" >
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>

            <span class="mt-2 block text-sm font-semibold text-gray-900">Successful Logins</span>
        </div>
    </div>
</div>


<style>
  .signin-item {
    padding: 10px;
    display: flex;
    background-color: #eee;
    border-radius: 5px;
    gap: 5px;
    flex-wrap: wrap;
  }

  .item-pair {
    padding: 5px;
    background: #c2d5dd;
    border-radius: 3px;
  }
</style>


<script src="https://cdn.passwordless.dev/dist/0.6.4/umd/passwordless.umd.js"></script>


@section Scripts {
    <script type="module">
      import { createApp, ref } from 'vue';
  createApp({
    setup() {

      const p = new Passwordless.Client({
        apiUrl: "@passwordlessOptions.Value.ApiUrl",
        apiKey: "@passwordlessOptions.Value.ApiKey"
      });

      const autoFill = async () => {
        const {token} = await p.signinWithAutofill();
        await signin(token);
      };
      autoFill();

    const signins = ref([]);
      const loginSubmit = async (e) => {
        // on form submit
        const alias = e.target.alias.value;
        console.log("Login", e, e.target.alias.value);
        var {token} = await p.signinWithAlias(alias)
        await signin(token);
      }

      async function signin(verify_token) {
        var result = await verifyWithBackend(verify_token);
        signins.value.push(result);
        console.log(signins.value);
      }

      return {
        loginSubmit,        
        signins
      }
    }
  }).mount('#xapp');

  async function verifyWithBackend(token) {
    console.warn("TOKEN", token);

    var res = await fetch("", {
      method: "POST",
      body: new URLSearchParams({ token }),
      headers: {
        RequestVerificationToken: "@requestToken"
      }
    });
    console.log("Result from post", res)

    if (res.ok) {
      return await res.json();
    }
    return res;
  }
</script>
}