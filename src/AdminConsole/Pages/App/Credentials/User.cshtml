@page "/credentials/user/{userid}"
@model UserModel
@inject IOptions<PasswordlessOptions> Options
@inject ICurrentContext CurrentContext

@{
  ViewData["Title"] = "User Details";
}

<div id="vue">
  <p>This pages summarizes the information for user @Html.Partial("_Badge", @Model.UserId)</p>

  <div class="sm:flex sm:items-center mt-8 mb-4">
      <div class="sm:flex-auto">
        <h2 class="text-base font-semibold leading-6 text-gray-900">Credentials</h2>
        @* <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title, email and role.</p> *@
      </div>
    </div>
  @* <div class="mb-5">
    <h6>Add new credential</h6>
    <form v-on:submit.prevent="createNewCredential" class="form-width">
      <div class="input-group ">
        <input type="text" name="nickname" id="nickname" class="form-control" placeholder="Nickname for the passkey">
        <button class="btn btn-primary">Register</button>
      </div>
    </form>
  </div> *@

  @if (Model.Credentials.Count == 0)
  {
    <p>No credentials registered for this user</p>
  }
  <div style="display: flex;
                  gap: 20px;
                  flex-wrap: wrap;">
    @foreach (var cred in Model.Credentials)
    {
      <div class="overflow-hidden bg-white shadow sm:rounded-lg max-w-fit">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-base font-semibold leading-6 text-gray-900">@cred.Device</h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">@(cred.Nickname ?? "No nickname")</p>
          <dl class="mt-2">
            <div class="flex items-center">
              <dt class="text-sm font-medium text-gray-500 mr-2">Created:</dt>
              <dd class="text-sm text-gray-900"><local-time datetime="@cred.CreatedAt.ToLocalTime()"></local-time></dd>
            </div>
            <div class="flex items-center">
              <dt class="text-sm font-medium text-gray-500 mr-2">Last used:</dt>
              <dd class="text-sm text-gray-900"><local-time datetime="@cred.LastUsedAt.ToLocalTime()"></local-time></dd>
            </div>
            <button 
              type="button"
              v-cloak 
              v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
              v-if="!showDetails('@cred.Descriptor.Id.ToBase64Url()')"
              class="block mt-2 mr-auto rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600"
            >Show more</button>
          </dl>
        </div>
        <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" class="border-t border-gray-200 px-4 py-5 sm:px-6">
          <dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
            <div class="sm:col-span-2">
              <dt class="text-sm font-medium text-gray-500">Credential Id</dt>
              <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.Descriptor.Id.ToBase64Url()</dd>
            </div>
            <div class="sm:col-span-2">
              <dt class="text-sm font-medium text-gray-500">Public Key</dt>
              <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.PublicKey.ToBase64Url()</dd>
            </div>
            
            <div class="sm:col-span-1">
              <dt class="text-sm font-medium text-gray-500">Type</dt>
              <dd class="mt-1 text-sm text-gray-900">@cred.AttestationFmt</dd>
            </div>
            <div class="sm:col-span-1">
              <dt class="text-sm font-medium text-gray-500">Counter</dt>
              <dd class="mt-1 text-sm text-gray-900">@cred.SignatureCounter</dd>
            </div>
            <div class="sm:col-span-1">
              <dt class="text-sm font-medium text-gray-500">RPID</dt>
              <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.RPID</dd>
            </div>
            <div class="sm:col-span-1">
              <dt class="text-sm font-medium text-gray-500">Origin</dt>
              <dd class="mt-1 text-sm text-gray-900">@cred.Origin</dd>
            </div>

            <div class="sm:col-span-2">
              <dt class="text-sm font-medium text-gray-500">AaGuid</dt>
              <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.AaGuid</dd>
            </div>
          </dl>
        </div>
        <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" v-cloak class="border-t border-gray-200 px-4 py-5 sm:px-6 flex">
          <button 
            type="button"
            v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
            class="block mr-auto rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600"
          >Show less</button>
          <a
            asp-page="Delete"
            asp-route-userid="@Model.UserId" 
            asp-route-credentialId="@cred.Descriptor.Id.ToBase64Url()" 
            type="button" 
            class="block ml-auto btn-danger"
          >Remove</a>
        </div>
      </div>
    }
  </div>
  <div class="sm:flex sm:items-center mt-8 mb-4">
      <div class="sm:flex-auto">
          <h2 class="text-base font-semibold leading-6 text-gray-900">Aliases</h2>
          @* <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title, email and role.</p> *@
      </div>
  </div>
  <info-alert-box message="Please note that aliases that are hashed cannot be shown in plaintext."></info-alert-box>
  <div class="aliases">
    <ul class="list-disc mt-4">
      @foreach (var alias in Model.Aliases)
      {
        @* <i class="bi bi-trash3 link-danger"></i> *@
        @if(!string.IsNullOrEmpty(alias.Plaintext)) {
          <li class="ml-8">@alias.Plaintext</li>
        } else {
          <li class="ml-8 italic">Hashed alias</li>
        }
      }
    </ul>
  </div>

  @* <div> *@
  @*   <div class="sm:flex sm:items-center mt-8 mb-4"> *@
  @*     <div class="sm:flex-auto"> *@
  @*       <h2 class="text-base font-semibold leading-6 text-gray-900">Audit Logs</h2> *@
  @*       $1$ <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title, email and role.</p> #1# *@
  @*     </div> *@
  @*   </div> *@
  @*   <div class="flow-root"> *@
  @*     <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8"> *@
  @*       <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8"> *@
  @*         <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg"> *@
  @*           <table class="min-w-full divide-y divide-gray-300"> *@
  @*             <thead class="bg-gray-50"> *@
  @*               <tr> *@
  @*                 <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Timestamp</th> *@
  @*                 <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Level</th> *@
  @*                 <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Message</th> *@
  @*               </tr> *@
  @*             </thead> *@
  @*             <tbody class="divide-y divide-gray-200 bg-white"> *@
  @*               @foreach (var log in Model.AuditLogs) *@
  @*               { *@
  @*                 <tr> *@
  @*                   <td scope="row" class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">@log.Timestamp</td> *@
  @*                   <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"> *@
  @*                     <span class="hidden badge-info badge-danger"></span> *@
  @*                     <span class="badge-@log.Level">@log.Level</span> *@
  @*                   </td> *@
  @*                   <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@log.Message</td> *@
  @*                 </tr> *@
  @*               } *@
  @*             </tbody> *@
  @*           </table> *@
  @*         </div> *@
  @*       </div> *@
  @*     </div> *@
  @*   </div> *@
  @* </div> *@
</div>

@Html.Partial("Shared/_PasswordlessClientJs")
@section Scripts {
    <script type="module">
  import { createApp, ref } from 'vue';
  createApp({
    setup() {
      const visibleCreds = ref({});
      const showDetails = (id) => {
        return visibleCreds.value[id];
      }
      const onShow = (id) => {
        visibleCreds.value[id] = !visibleCreds.value[id];
      }

      const p = new Passwordless.Client({
        apiUrl: "@Options.Value.ApiUrl",
        apiKey: "@CurrentContext.ApiKey"
      });

      const createNewCredential = () => {
        // Get register token from server side rendering
        p.register("@Model.RegisterToken");
      }

      return {
        showDetails,
        onShow,
      }
    }
  }).mount('#vue');
</script>
}
