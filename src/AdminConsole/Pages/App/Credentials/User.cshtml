@page "/credentials/user/{userid}"
@using Microsoft.Extensions.Options
@using Passwordless.AdminConsole.Extensions.Sdk
@using Passwordless.AdminConsole.Middleware
@using Passwordless.AdminConsole.TagHelpers
@using Passwordless.Common.Extensions
@inject IOptions<PasswordlessOptions> Options
@inject ICurrentContext CurrentContext
@model UserModel

@{
    ViewData["Title"] = "User Details";
}

<div id="vue">
    <p>This pages summarizes the information for user <partial name="_Badge" model="@Model.UserId"/></p>

    <div class="sm:flex sm:items-center mt-8 mb-4">
        <div class="sm:flex-auto">
            <h2>Credentials</h2>
        </div>
    </div>

    @if (Model.Credentials.Count == 0)
    {
        <p>No credentials registered for this user</p>
    }
    <div style="display: flex;
                  gap: 20px;
                  flex-wrap: wrap;">
        @foreach (var cred in Model.Credentials)
        {
            <div class="@(cred.IsNew() ? "credential-card-new" : "credential-card")">
                <div class="px-4 py-5 sm:px-6">
                    <h3>@cred.Device</h3>
                    <p class="mt-1 max-w-2xl text-sm text-gray-500">@(cred.Nickname ?? "No nickname")</p>
                    <dl class="mt-2">
                        <div class="summary-property">
                            <dt class="property-label">Created:</dt>
                            <dd class="text-property-value">
                                <asp-local-time datetime="@cred.CreatedAt"/>
                            </dd>
                        </div>
                        <div class="summary-property">
                            <dt class="property-label">Last used:</dt>
                            <dd class="property-value">
                                <asp-local-time datetime="@cred.LastUsedAt"/>
                            </dd>
                        </div>
                        
                        <div class="credential-card-summary-footer">
                            <button
                                type="button"
                                v-cloak
                                v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
                                v-if="!showDetails('@cred.Descriptor.Id.ToBase64Url()')"
                                class="block rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
                                Show more
                            </button>
                            @if (cred.IsNew())
                            {
                                <badge v-if="!showDetails('@cred.Descriptor.Id.ToBase64Url()')" variant="ColorVariant.Success" text="New"></badge>
                            }
                        </div>
                    </dl>
                </div>
                <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" class="border-t border-gray-200 px-4 py-5 sm:px-6">
                    <dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                        <div class="flex flex-col space-y-1 details-property sm:col-span-2">
                            <dt class="property-label">Credential Id</dt>
                            <dd class="property-value font-mono">@cred.Descriptor.Id.ToBase64Url()</dd>
                        </div>
                        <div class="flex flex-col space-y-1 details-property sm:col-span-2">
                            <dt class="property-label">Public Key</dt>
                            <dd class="property-value font-mono">@cred.PublicKey.ToBase64Url()</dd>
                        </div>
                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Type</dt>
                            <dd class="property-value">@cred.AttestationFmt</dd>
                        </div>
                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Counter</dt>
                            <dd class="property-value">@cred.SignatureCounter</dd>
                        </div>
                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">RPID</dt>
                            <dd class="property-value">@cred.RPID</dd>
                        </div>
                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Origin</dt>
                            <dd class="property-value">@cred.Origin</dd>
                        </div>

                        <div class="details-property sm:col-span-2">
                            <dt class="property-label">AaGuid</dt>
                            <dd class="property-value font-mono">@cred.AaGuid</dd>
                        </div>

                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Discoverable</dt>
                            <dd class="property-value">@(cred.IsDiscoverable.HasValue ? cred.IsDiscoverable.Value : "Unknown")</dd>
                        </div>

                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Backup State / Synced</dt>
                            <dd class="property-value">@(cred.BackupState.HasValue ? cred.BackupState.Value : "Unknown")</dd>
                        </div>

                        <div class="details-property sm:col-span-1">
                            <dt class="property-label">Backup Eligibility</dt>
                            <dd class="property-value">@(cred.IsBackupEligible.HasValue ? cred.IsBackupEligible.Value : "Unknown")</dd>
                        </div>

                    </dl>
                </div>
                <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" v-cloak class="border-t border-gray-200 px-4 py-5 sm:px-6 flex">
                    <button
                        type="button"
                        v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
                        class="block mr-auto rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
                        Show less
                    </button>
                    <a
                        asp-page="Delete"
                        asp-route-userid="@Model.UserId"
                        asp-route-credentialId="@cred.Descriptor.Id.ToBase64Url()"
                        type="button"
                        class="block ml-auto btn-danger">
                        Remove
                    </a>
                </div>
            </div>
        }
    </div>
    <div class="sm:flex sm:items-center mt-8 mb-4">
        <div class="sm:flex-auto">
            <h2>Aliases</h2>
            @* <p class="mt-2 text-sm text-gray-700">A list of all the users in your account including their name, title, email and role.</p> *@
        </div>
    </div>
    <info-alert-box message="Please note that aliases that are hashed cannot be shown in plaintext."></info-alert-box>
    <div class="aliases">
        <ul class="list-disc mt-4">
            @foreach (var alias in Model.Aliases)
            {
        @* <i class="bi bi-trash3 link-danger"></i> *@
                @if (!string.IsNullOrEmpty(alias.Plaintext))
                {
                    <li class="ml-8">@alias.Plaintext</li>
                }
                else
                {
                    <li class="ml-8 italic">Hashed alias</li>
                }
            }
        </ul>
    </div>
</div>

<partial name="Shared/_PasswordlessClientJs"/>

@section Scripts {
    <script type="module">
  import { createApp, ref } from 'vue';
  createApp({
    setup() {
      const visibleCreds = ref({});
      const showDetails = (id) => {
        return visibleCreds.value[id];
      }
      const onShow = (id) => {
        visibleCreds.value[id] = !visibleCreds.value[id];
      }

      const p = new Passwordless.Client({
        apiUrl: "@Options.Value.ApiUrl",
        apiKey: "@CurrentContext.ApiKey"
      });

      const createNewCredential = () => {
        // Get register token from server side rendering
        p.register("@Model.RegisterToken");
      }

      return {
        showDetails,
        onShow,
      }
    }
  }).mount('#vue');
</script>
}