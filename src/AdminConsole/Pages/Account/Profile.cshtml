@page
@using Microsoft.AspNetCore.Antiforgery
@model Profile
@inject IOptions<PasswordlessOptions> PasswordlessClientOptions
@inject IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Profile Settings";
    var requestToken = Antiforgery.GetAndStoreTokens(Model.HttpContext).RequestToken;
}

<div>
    <h2 class="text-base font-semibold leading-6 text-gray-900 mb-3">Passkeys</h2>
    <div id="xapp" class="flex flex-col gap-10">
        <div class="">

            <form asp-page-handler="removeCredential" method="post">
                <div class="flex flex-wrap gap-5 mb-3">
                    @foreach (var cred in Model.Credentials)
                    {
                        <div class="overflow-hidden bg-white shadow sm:rounded-lg max-w-fit">
                            <div class="px-4 py-5 sm:px-6">
                                <h3 class="text-base font-semibold leading-6 text-gray-900">@cred.Device</h3>
                                <p class="mt-1 max-w-2xl text-sm text-gray-500">@(cred.Nickname ?? "No nickname")</p>
                                <dl class="mt-2">
                                    <div class="flex items-center">
                                        <dt class="text-sm font-medium text-gray-500 mr-2">Created:</dt>
                                        <dd class="text-sm text-gray-900"><local-time datetime="@cred.CreatedAt.ToLocalTime()"></local-time></dd>
                                    </div>
                                    <div class="flex items-center">
                                        <dt class="text-sm font-medium text-gray-500 mr-2">Last used:</dt>
                                        <dd class="text-sm text-gray-900"><local-time datetime="@cred.LastUsedAt.ToLocalTime()"></local-time></dd>
                                    </div>

                                    <button
                                        type="button"
                                        v-cloak
                                        v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
                                        v-if="!showDetails('@cred.Descriptor.Id.ToBase64Url()')"
                                        class="block mt-2 mr-auto rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
                                        Show more
                                    </button>
                                </dl>
                            </div>
                            <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" class="border-t border-gray-200 px-4 py-5 sm:px-6">
                                <dl class="grid grid-cols-1 gap-x-4 gap-y-8 sm:grid-cols-2">
                                    <div class="sm:col-span-2">
                                        <dt class="text-sm font-medium text-gray-500">Credential Id</dt>
                                        <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.Descriptor.Id.ToBase64Url()</dd>
                                    </div>
                                    <div class="sm:col-span-2">
                                        <dt class="text-sm font-medium text-gray-500">Public Key</dt>
                                        <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.PublicKey.ToBase64Url()</dd>
                                    </div>

                                    <div class="sm:col-span-1">
                                        <dt class="text-sm font-medium text-gray-500">Type</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@cred.AttestationFmt</dd>
                                    </div>
                                    <div class="sm:col-span-1">
                                        <dt class="text-sm font-medium text-gray-500">Counter</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@cred.SignatureCounter</dd>
                                    </div>
                                    <div class="sm:col-span-1">
                                        <dt class="text-sm font-medium text-gray-500">RPID</dt>
                                        <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.RPID</dd>
                                    </div>
                                    <div class="sm:col-span-1">
                                        <dt class="text-sm font-medium text-gray-500">Origin</dt>
                                        <dd class="mt-1 text-sm text-gray-900">@cred.Origin</dd>
                                    </div>

                                    <div class="sm:col-span-2">
                                        <dt class="text-sm font-medium text-gray-500">AaGuid</dt>
                                        <dd class="mt-1 text-sm text-gray-900 font-mono">@cred.AaGuid</dd>
                                    </div>
                                </dl>
                            </div>
                            <div v-if="showDetails('@cred.Descriptor.Id.ToBase64Url()')" class="border-t border-gray-200 px-4 py-5 sm:px-6 flex">
                                <button
                                    type="button"
                                    v-on:click="onShow('@cred.Descriptor.Id.ToBase64Url()')"
                                    v-cloak
                                    class="block mr-auto rounded py-1 text-xs font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
                                    Show less
                                </button>
                                <button
                                    type="submit"
                                    name="credentialId" value="@cred.Descriptor.Id.ToBase64Url()"
                                    class="block ml-auto rounded bg-red-600 py-1 px-2 text-xs font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600">
                                    Remove
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </form>

            <form v-on:submit="registerCredential">
                <fieldset id="registerCredentialFields">
                    <div class="mt-2 flex">
                        <div class="relative flex flex-grow items-stretch focus-within:z-10  max-w-md">
                            <input
                                type="text" name="nickname" id="nickname" placeholder="Enter a nickname (e.g. My Work laptop) for this security key"
                                class="block w-full rounded-none rounded-l-md border-0 py-2 px-2 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                        </div>
                        <button type="submit" class="relative -ml-px inline-flex items-center gap-x-1.5 rounded-r-md px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
                            Add Passkey
                        </button>
                        <div id="webauthn-unsupported-alert" class="hidden">
                            <danger-alert-box message="WebAuthn is not supported in this browser."></danger-alert-box>
                        </div>
                    </div>
                </fieldset>
            </form>
        </div>
    </div>
</div>

<partial name="Shared/_PasswordlessClientJs" />
@section Scripts {

    <script type="module">
    import { createApp, ref } from 'vue';
    createApp({
        setup() {
            const visibleCreds = ref({});
            const showDetails = (id) => {
              return visibleCreds.value[id];
            }
            const onShow = (id) => {
                visibleCreds.value[id] = !visibleCreds.value[id];
            }
            
            const p = new Passwordless.Client({
                apiUrl: "@PasswordlessClientOptions.Value.ApiUrl",
                apiKey: "@PasswordlessClientOptions.Value.ApiKey"
            });
            
            const working = ref(false);
            const registerCredential = async (e) => {
                e.preventDefault();
                if (working.value) return;
                working.value = true;
                try {
                    const data = new FormData(e.target);
                    const req = await fetch("/passwordless-add-credential", {
                        method: "POST",
                        body: JSON.stringify({ displayName: data.get("nickname")}),
                        headers: {
                            RequestVerificationToken: "@requestToken",
                            "Content-Type": "application/json"
                        }
                    });
    
                    if (req.ok) {
                        const registerToken = await req.json();
                        const nicknameForDevice = data.get("nickname");
                        
                        const {token, error} = await p.register(registerToken.token, nicknameForDevice);
                        document.location.reload();
                    }
                } finally {
                    working.value = false;
                }
            }

            return {
                registerCredential,
                showDetails,
                onShow              
            }
        }
    }).mount('#xapp');

    async function verifyWithBackend(token) {
        console.warn("TOKEN", token);

        var res = await fetch("", {
            method: "POST",
            body: new URLSearchParams({ token }),
            headers: {
                RequestVerificationToken: "@requestToken"
            }
        });
        console.log("Result from post", res)

        if (res.ok) {
            return await res.json();
        }
        return res;
    }
    </script>
    <script type="module">
        const isSupported = Passwordless.isBrowserSupported();
        if (!isSupported) {
            const registerCredentialFields = document.getElementById("registerCredentialFields");
            registerCredentialFields.disabled = true;
            const alert = document.getElementById("webauthn-unsupported-alert");
            alert.classList.remove("hidden");
        }
    </script>
}
