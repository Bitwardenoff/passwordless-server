@using AdminConsole.Helpers
@using AdminConsole.Identity
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ConsoleAdmin> signinManager
@inject UserManager<ConsoleAdmin> UserManager
@inject IOptions<PasswordlessClientOptions> Options
@inject ICurrentContext CurrentContext
@{
    var signedIn = signinManager.IsSignedIn(User);
}
<!DOCTYPE html>
<html lang="en" class="h-full">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - Admin Console - Bitwarden Passwordless.dev</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/tailwind.css" asp-append-version="true"/>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
</head>

<body class="h-full bg-gray-50">
    <if asp-if="signedIn">
    <template id="sidenav">
        <div class="flex flex-1 flex-col overflow-y-auto pt-5 pb-4">
            <a asp-page="/organization/overview" title="Home" class="flex flex-shrink-0 items-center p-5 pb-3 pr-10 gap-1">
                @Html.Partial("_Logo")
            </a>
            <nav class="mt-5 flex-1 space-y-1 px-2">
                @Html.Partial("_NavLinkPartial", ("Applications", "/organization/overview", "Icons/CodeBracketSquare"))

                @if (CurrentContext.InAppContext)
                {
                    <div class="m-2 rounded-md bg-opacity-25 bg-black p-4">
                        <div class="text-xs font-semibold text-blue-200 ml-3 mb-3 truncate">App: @CurrentContext.AppId</div>
                        @Html.Partial("_NavLinkPartial", ("Getting Started", "/app/onboarding/getstarted", "Icons/Users"))
                        @Html.Partial("_NavLinkPartial", ("Users", "/app/credentials/list", "Icons/Users"))
                        @Html.Partial("_NavLinkPartial", ("Settings", "/app/Settings/Settings", "Icons/Cog"))
                        @Html.Partial("_NavLinkPartial", ("Playground", "/app/Playground/Client", "Icons/Beaker"))
                    </div>
                }

                <partial name="_NavLinkPartial" model="@("Billing", "/billing/manage", "Icons/CodeBracketSquare")"/>
                <partial name="_NavLinkPartial" model="@("Admins", "/organization/admins", "Icons/Users")"/>
            </nav>
        </div>
        <div class="flex flex-col flex-shrink-0 flex-grow-0 p-4 bg-opacity-25 bg-black">

            <div class="flex justify-between items-center mb-2">
                <span class="text-xs font-medium text-blue-200 group-hover:text-white">Logged in as:</span>
                <form class="contents" asp-page="/Account/Logout"
                      asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                    <button id="logout" type="submit"
                            class="text-xs font-medium text-white underline group-hover:text-white">
                        Logout
                    </button>
                </form>
            </div>
            <a class="text-sm font-medium text-white truncate" asp-page="/Account/Profile"
               title="Manage">
                @UserManager.GetUserName(User)
            </a>
        </div>

    </template>

    @* Off-canvas menu for mobile *@
    <div data-menu class="relative z-40 hidden" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>

        <div class="fixed inset-0 z-40 flex">
            <div class="relative flex w-full max-w-xs flex-1 flex-col bg-primary-700">
                <div class="absolute top-0 right-0 -mr-12 pt-2">
                    <button data-menu-button type="button"
                            class="ml-1 flex h-10 w-10 items-center justify-center rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                        <span class="sr-only">Close sidebar</span>
                        <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                             aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                <div data-sidenav></div>
            </div>
            <div class="w-14 flex-shrink-0" aria-hidden="true"></div>
        </div>
    </div>

    @* Static sidebar for desktop *@
    <div class="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col">
        <div class="flex min-h-0 flex-1 flex-col bg-primary-700">
            <div data-sidenav></div>
        </div>
    </div>
    <div class="flex flex-1 flex-col lg:pl-64 min-h-full">
        <div class="sticky top-0 z-10 bg-gray-100 pl-1 pt-1 sm:pl-3 sm:pt-3 lg:hidden">
            <button data-menu-button type="button"
                    class="-ml-0.5 -mt-0.5 inline-flex h-12 w-12 items-center justify-center rounded-md text-gray-500 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
                <span class="sr-only">Open sidebar</span>
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                     aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"/>
                </svg>
            </button>
        </div>
        <main class="flex-1">
            <div class="py-6">
                <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    @if (ViewData["HideTitle"] == null)
                    {
                        <h1 class="text-2xl font-semibold text-gray-900 mb-8">@ViewData["Title"]</h1>
                    }
                </div>
                <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    @RenderBody()
                </div>
            </div>
        </main>
        <environment include="Development">
            <footer class="flex gap-4 p-4 m-4 text-sm bg-black rounded-md bg-opacity-10 flex-wrap max-w-fit">
                <div>
                    <span class="font-semibold">ApiUrl: </span>@Options.Value.ApiUrl
                </div>
                <div>
                    @if (CurrentContext.InAppContext)
                    {
                        <span class="font-semibold">ApiKey: </span>@CurrentContext.ApiKey
                    }
                    else
                    {
                        <span class="font-semibold">ApiKey: </span>@Options.Value.ApiKey
                    }
                </div>
            </footer>
        </environment>
    </div>
</if>
    <div asp-if="!signedIn" class="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-16 lg:flex-col">
        <div class="flex min-h-0 flex-1 flex-col bg-primary-500">
            <div class="flex flex-1 flex-col overflow-y-auto pt-5 pb-4">
                <div class="flex flex-shrink-0 items-center px-4">
                    <a asp-area="" asp-page="/Index">
                        <img class="block h-8 w-auto" src="@Url.Content("~/icon.svg")"
                             height=20 class="mx-2"/>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div asp-if="!signedIn" class="flex flex-1 flex-col lg:pl-16 min-h-full">
        <main class="flex-1">
            <div class="py-6">
                <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    @if (ViewData["HideTitle"] == null)
                    {
                        <h1 class="text-2xl font-semibold text-gray-900 mb-8">@ViewData["Title"]</h1>
                    }
                </div>
                <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    @RenderBody()
                </div>
            </div>
        </main>
    </div>
    <script async src="@Url.Content("~/lib/es-module-shims.js")"></script>
@Html.ImportMap(new Dictionary<string, (string Dev, string Prod)> { ["vue"] = ("/lib/vue.esm-browser.js","/lib/vue.esm-browser.prod.js") });
<script>
    const sideNavTemplate = document.querySelector('#sidenav');
    document.querySelectorAll('[data-sidenav]').forEach(el => {
        const clone = sideNavTemplate.content.cloneNode(true);
        el.replaceWith(clone);
    });

    document.querySelectorAll('[data-menu-button]').forEach(button => {
      button.addEventListener('click', _click => {
        document.querySelectorAll('[data-menu]').forEach(menu => menu.classList.toggle('hidden'));
      })
    })

    document.querySelectorAll('a[data-route-active]').forEach(el => {
      if (document.location.href.indexOf(el.href) >= 0) {
        el.classList.add(...el.dataset.routeActive?.split(' '));
      } else {
        el.classList.add(...el.dataset.routeInactive?.split(' '));
      }
    })
  </script>
<script>
    const forms = document.querySelectorAll('form[only-once]');
    forms.forEach(function (form) {
        form.addEventListener('submit', function (e) {
            // check if disabled, if not, disable and submit
            if (!form.classList.contains('disabled')) {
                form.classList.add('disabled');
                form.submit();
            } else {
                e.preventDefault();                                
            }                            
            return false;
        });
    });
    // const els = document.querySelectorAll('[click-debounce]');
    // els.forEach(e =>{
    //     console.log("click debounce",e)
    //     e.addEventListener('click', (e2) => {
    //         console.log("listened");
    //         e2.disabled = true;
    //         const timeout = e.attributes.getNamedItem("click-debounce").value || 1000;
    //         setTimeout(() => {
    //             e2.disabled = false;
    //         },timeout);
    //     });
    // });
</script>
<script type="module" src="@Url.Content("~/js/elements/copy-text.mjs")"></script>
<script type="module" src="@Url.Content("~/js/elements/local-time.mjs")"></script>
@await RenderSectionAsync("Scripts", false)
</body>
</html>
