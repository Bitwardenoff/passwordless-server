@using AdminConsole.Helpers
@inject IOptions<PasswordlessOptions> Options

<div id="addPasskeysPanel">
    <form v-on:submit="registerCredential">
        <fieldset id="registerCredentialFields">
            <div class="mt-2 flex">
                <div class="relative flex flex-grow items-stretch focus-within:z-10  max-w-md">
                    <input
                        type="text" name="nickname" id="nickname" placeholder="Enter a nickname (e.g. My Work laptop) for this security key"
                        class="block w-full rounded-none rounded-l-md border-0 py-2 px-2 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6">
                </div>
                <button type="submit" class="btn-secondary">
                    Add Passkey
                </button>
                <div id="webauthn-unsupported-alert" class="hidden">
                    <danger-alert-box message="WebAuthn is not supported in this browser."></danger-alert-box>
                </div>
            </div>
        </fieldset>
    </form>

    <div class="status mt-3" v-cloak>
        <div v-if="feedback.status =='completed'">
            <div class="rounded-md bg-green-50 p-4 mb-3">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <success-alert-icon></success-alert-icon>
                    </div>
                    <div class="ml-3 flex-1 md:flex md:justify-between">
                        <p class="text-sm font-medium text-green-800">{{feedback.message}}</p>
                        <p class="mt-3 text-sm md:ml-6 md:mt-0">
                            <a href="@Url.Page("")" class="whitespace-nowrap font-medium text-green-700 hover:text-green-600">
                                Refresh
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div v-if="feedback.status =='error'">
            <div class="rounded-md bg-red-50 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-red-800">{{feedback.message}}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.PartialSectionScripts(@<script type="module">
    import { createApp, ref, reactive } from 'vue';
    createApp({
        setup() {            
            const p = new Passwordless.Client({
                apiUrl: "@Options.Value.ApiUrl",
                apiKey: "@Options.Value.ApiKey"
            });
            
            const supportsPasskeys = ref(false);
            const supportsSecurityKeys = ref(false);
            Passwordless.isPlatformSupported().then(s => supportsPasskeys.value = s);
            supportsSecurityKeys.value = Passwordless.isBrowserSupported();
            
            const feedback = reactive({
                status: "",
                message: ""
            });
            
            const working = ref(false);
            const registerCredential = async (e) => {
                e.preventDefault();
                if (working.value) return;
                working.value = true;

                try {
                    feedback.status = "started";                
                    const data = new FormData(e.target);
                    const req = await fetch("/passwordless-add-credential", {
                        method: "POST",
                        body: JSON.stringify({ displayName: data.get("nickname")}),
                        headers: {
                            "Content-Type": "application/json",
                        }
                    });
                    
                    try {
                        if (!req.ok) throw new Error("Backend request failed");
                        
                        const registerToken = await req.json();
                        const nicknameForDevice = data.get("nickname");                    
                        const {token, error } = await p.register(registerToken.token, nicknameForDevice);
                        if (token) {
                            feedback.status = "completed";
                            feedback.message = "Passkey added successfully";
                        } else {
                            feedback.status = "error";
                            if (error.from == "client" && !error.erroCode) {
                                feedback.message = "No passkey was added. Please try again.";
                            } else {
                                if (error.errors && error.errors.nickname && error.errors.nickname.length > 0) {
                                    feedback.message = error.errors.nickname[0];
                                } else {
                                    feedback.message = error.title;
                                }
                            }
                        }
                    } catch (e) {                    
                        feedback.status = "error";
                        feedback.message = "No passkey was added. Please try again.";
                    }
                } finally {
                    working.value = false;
                }
            }
            
            return {
                registerCredential,
                feedback,
                supportsPasskeys,
                supportsSecurityKeys
            }
        }
    }).mount('#addPasskeysPanel');</script>)
@Html.PartialSectionScripts(@<script type="module">
    const isSupported = Passwordless.isBrowserSupported();
    if (!isSupported) {
        const registerCredentialFields = document.getElementById("registerCredentialFields");
        registerCredentialFields.disabled = true;
        const alert = document.getElementById("webauthn-unsupported-alert");
        alert.classList.remove("hidden");
    }
    </script>)