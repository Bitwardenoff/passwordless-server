<dl class="@Class">
    @foreach (var item in Items)
    {
        <div class="overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6">
            <dt class="truncate font-sm font-sans font-semibold">@item.Label</dt>
            <dd class="mt-1 text-3xl font-semibold tracking-tight text-blue-600">@item.GetValue()</dd>
        </div>
    }
</dl>


@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; } = new Dictionary<string, object>();

    public string Class { get; private set; } = "mt-5 grid grid-cols-1 gap-5 sm:grid-cols-3";
    
    [Parameter]
    public required ICollection<Item> Items { get; set; }

    protected override void OnInitialized()
    {
        if (AdditionalAttributes == null) return;
        if (AdditionalAttributes.TryGetValue("class", out var classAttribute))
        {
            Class = $"{Class} {classAttribute}";
        }
    }

    public sealed record Item(string Label, double Value, ValueTypes Type)
    {
        public string GetValue()
        {
            switch (Type)
            {
                case ValueTypes.Double:
                    return Value.ToString("N2");
                case ValueTypes.Integer:
                    return Value.ToString("N0");
                case ValueTypes.Percentage:
                    return $"{Value:P2}";
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    }

    public enum ValueTypes
    {
        Double,
        Integer,
        Percentage
    }
}