@page "/initialize"
@attribute [AllowAnonymous]

@using Passwordless.AdminConsole.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using Passwordless.Common.Models.Apps
@using Passwordless.AdminConsole.Services.PasswordlessManagement
@using Passwordless.AdminConsole.Db
@using Microsoft.AspNetCore.Identity
@using Passwordless.AdminConsole.Models
@using System.ComponentModel.DataAnnotations

@inject ISetupService SetupService
@inject IOptions<PasswordlessManagementOptions> ManagementOptions
@inject ConsoleDbContext DbContext
@inject NavigationManager NavigationManager
@inject IApplicationService ApplicationService
@inject IDataService DataService
@inject TimeProvider TimeProvider
@inject UserManager<ConsoleAdmin> UserManager
@inject ILogger<Initialize> Logger

<h3>🚀 Let's set up the Admin Console</h3>
<InfoAlert class="mt-5">Admin Console is configured to use the API at <strong>@ManagementOptions.Value.ApiUrl</strong></InfoAlert>


<div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
    @if (!IsFormSubmitted)
    {
        <p class="mb-3">
            Since the Admin Console is missing either migrations or ApiKeys to the Passwordles API, we'll need to do some setup using the form below.
        </p>

        <p class="mb-">
            Submitting the form will create an organization and application for the Admin Console to use for passkeys and magic links.
        </p>
        <EditForm
            Model="Form"
            FormName="AdminConsoleCreateForm"
            OnValidSubmit="OnAdminConsoleCreateFormSubmitted"
            class="space-y-6">
            <div class="sm:w-full sm:max-w-md">
                <label class="block text-sm font-medium leading-6 text-gray-900 my-2" for="Name">
                    Admin Name
                    <InputText id="Name" @bind-Value="@Form.AdminName" class="text-input" placeholder="Hubert J. Farnsworth"/>
                </label>
                <label class="block text-sm font-medium leading-6 text-gray-900 my-2" for="Email">
                    Admin Email
                    <InputText id="Email" @bind-Value="@Form.AdminEmail" type="email" class="text-input" placeholder="hubert@planetexpress.com"/>
                </label>
                <p class="mt-3 text-sm leading-6 text-gray-600">This email will be limited to the admin organisation and cannot be used to create another organisation later.</p>

                <button class="btn-primary mt-3" type="submit">Initialize the Admin Console</button>
            </div>
        </EditForm>
    }

    @if (IsFormSubmitted)
    {
        <p class="mt-3">@ProcessMessage</p>
        
        <SecureScript>
            async function getSetupStatus() {
                const response = await fetch("/setup/status")
                    .then(response => response.json())
                    .catch(() => console.error("Failed to fetch setup status."));
                
                const success = response.hasSetupCompleted;
                document.getElementById("setup-status").innerText = success ? "✅ Configuration complete." : "⏳ Configuration incomplete (automatically refreshing every 5 seconds).";   
                
                if (success) {
                    return true;
                }
                
                await new Promise(resolve => setTimeout(resolve, 5000));
                return false;
            }
            
            (async () => {
              while (true) {
                let result = await getSetupStatus();
                if (result === true) {
                  break;
                }
              }
            })();
        </SecureScript>
    }
    
    @if (AppKeys is not null)
    {
        <p class="mt-3 mb-3"><strong>Keep these values secret</strong>. Add these values to your Admin Console configuration:</p>
        <code style="white-space: pre;" lang="json">
            "Passwordless": {
            "ApiUrl": "@ManagementOptions.Value.ApiUrl",
            "ApiKey": "@AppKeys.ApiKey1",
            "ApiSecret": "@AppKeys.ApiSecret1"
            }
        </code>
        
        @if (IsFormSubmitted)
        {
            <p id="setup-status" class="mt-3"><strong>Status:</strong> Configuration incomplete (automatically refreshing every 5 seconds).</p>
        }
        
        <p class="mt-3">
            After doing this, you will need to restart the application, refresh this page and enter the Admin Email used here to receive a magic link. 
        </p>
    }

</div>

@code {

    [SupplyParameterFromForm(FormName = "AdminConsoleCreateForm")]
    public AdminConsoleCreateForm Form { get; set; } = new();

    public bool IsFormSubmitted { get; set; }
    public string ProcessMessage { get; set; } = string.Empty;

    public CreateAppResultDto? AppKeys { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await SetupService.HasSetupCompletedAsync())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnAdminConsoleCreateFormSubmitted()
    {
        
        IsFormSubmitted = true;

        Models.Organization organization;
        var now = TimeProvider.GetUtcNow().UtcDateTime;

        // create app in api
        try
        {
            using var http = new HttpClient();
            http.BaseAddress = new Uri(ManagementOptions.Value.InternalApiUrl);
            http.DefaultRequestHeaders.Add("ManagementKey", ManagementOptions.Value.ManagementKey);

            using var response = await http.PostAsJsonAsync("/admin/apps/adminconsole/create", new CreateAppDto
            {
                AdminEmail = Form.AdminEmail
            });

            response.EnsureSuccessStatusCode();
            
            AppKeys = (await response.Content.ReadFromJsonAsync<CreateAppResultDto>())!;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create app in Api.");
            ProcessMessage = "Failed to create app in Api. Please see Console for a detailed error message";
            return;
        }

        await DbContext.Database.MigrateAsync();

        // create org
        try
        {
            organization = new Models.Organization
            {
                Name = "Admin Console",
                InfoOrgType = "company",
                InfoUseCase = "both",
                CreatedAt = now
            };
            await DataService.CreateOrganizationAsync(organization);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create org.");
            ProcessMessage = "Failed to create org. Please see Console for a detailed error message.";
            return;
        }

        // create admin
        try
        {
            var user = new ConsoleAdmin
            {
                UserName = Form.AdminEmail,
                Email = Form.AdminEmail,
                OrganizationId = organization.Id,
                Name = Form.AdminName
            };

            await UserManager.SetUserNameAsync(user, Form.AdminEmail);
            await UserManager.SetEmailAsync(user, Form.AdminEmail);
            await UserManager.CreateAsync(user);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create admin.");
            ProcessMessage = "Failed to create admin. Please see Console for a detailed error message.";
            return;
        }

        // create app in org
        try
        {
            await ApplicationService.CreateApplicationAsync(new Application
            {
                Id = "adminconsole",
                Name = "Admin Console",
                Description = "This is the AdminConsole application within AdminConsole.",
                CreatedAt = now,
                OrganizationId = organization.Id,
                ApiKey = AppKeys.ApiKey2,
                ApiSecret = AppKeys.ApiSecret2,
                ApiUrl = ManagementOptions.Value.ApiUrl,
                Onboarding = new Onboarding
                {
                    ApiKey = AppKeys.ApiKey1,
                    ApiSecret = AppKeys.ApiSecret1,
                    SensitiveInfoExpireAt = now.AddDays(7)
                },
                BillingPlan = "Free"
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create app in AdminConsole.");
            ProcessMessage = "Failed to create app in AdminConsole. Please see Console for a detailed error message.";
        }

        ProcessMessage = "✅ Admin Console has been initialized successfully.";
    }
    
    public sealed class AdminConsoleCreateForm
    {
        [Required] public string AdminName { get; set; } = string.Empty;
        [Required, EmailAddress] public string AdminEmail { get; set; } = string.Empty;
    }

}