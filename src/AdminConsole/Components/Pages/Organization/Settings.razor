@page "/Settings"
@using System.ComponentModel.DataAnnotations

@inject IDataService DataService

<Page Title="Organization Settings">
    <Panel Header="Delete Organization">
        @if (CanDelete)
        {
            <ConfirmEditForm EditContext="_deleteOrgEditContext" FormName="@DeleteOrgFormName" Model="@FormModel" OnSubmit="@OnSubmitAsync">
                <DataAnnotationsValidator/>
                <CustomValidationErrors EditContext="_deleteOrgEditContext" />
                <p>Unexpected bad things will happen if you donâ€™t read this:</p>
                <ul role="list" class="list-disc list-inside">
                    <li>Active subscriptions will be canceled and will not be automatically renewed.</li>
                    <li>This will permanently delete the organization <strong>'@OrganizationName'</strong>.</li>
                    <li>All related data to the organization will be deleted: Settings, developer logs or any related event logs.</li>
                </ul>
                <div class="flex rounded-md">
                    <InputText @bind-Value="@FormModel.OrganizationName" type="text" class="text-input rounded-r-none font-mono"/>
                    <ConfirmButton 
                        ConfirmTitle="Delete Organization"
                        ConfirmDescription="Are you sure you would like to delete your organization? There's no going back."
                        ConfirmButtonText="I'm Sure"
                        class="btn-danger rounded-l-none"
                        type="submit">Delete</ConfirmButton>
                </div>
                <p class="italic">Type the name of the organization and click "Delete".</p>
            </ConfirmEditForm>
        }
        else
        {
            <p>Your organization '@(OrganizationName)' has @ApplicationCount application(s) that are active or pending deletion.</p>
            <p>You can only delete an organization when you have no applications.</p>
        }
    </Panel>
</Page>

@code {
    private string OrganizationName { get; set; }
    private bool CanDelete { get; set; }
    private int ApplicationCount { get; set; }

    private const string DeleteOrgFormName = "delete-org-form";

    public class DeleteOrgModel
    {
        [Required]
        public string OrganizationName { get; set; } = string.Empty;
    };

    [SupplyParameterFromForm(FormName = DeleteOrgFormName)]
    public DeleteOrgModel FormModel { get; set; } = new();

    private EditContext _deleteOrgEditContext = null!;
    private ValidationMessageStore _deleteOrgValidationStore = null!;
    
    protected override async Task OnInitializedAsync()
    {
        _deleteOrgEditContext = new EditContext(FormModel);
        _deleteOrgValidationStore = new ValidationMessageStore(_deleteOrgEditContext);
        
        var organization = await DataService.GetOrganizationWithDataAsync();

        OrganizationName = organization.Name;
        ApplicationCount = organization.Applications.Count;
        CanDelete = ApplicationCount == 0;
    }

    private void Validate(EditContext editContext)
    {
        if (!string.Equals(FormModel.OrganizationName, OrganizationName, StringComparison.Ordinal))
        {
            _deleteOrgValidationStore.Add(() => FormModel.OrganizationName, "Please type the name of your organization.");
        }
    }

    public async Task OnSubmitAsync()
    {
        if (!_deleteOrgEditContext.Validate())
        {
        }
        
        if (!string.Equals(OrganizationName, FormModel.OrganizationName, StringComparison.Ordinal))
        {
            
        }
    }
}