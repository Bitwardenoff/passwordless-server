@page "/Organization/Settings"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Options
@using Passwordless.AdminConsole.Helpers
@inject IDataService DataService
@inject ILogger<Settings> Logger
@inject IHttpContextAccessor Accessor

@inject IAuthorizationService AuthService
@inject IOptions<PasswordlessOptions> Options

<SecureScript type="module">
    async function stepup(callback) {
        const p = new Passwordless.Client(
        {
            apiKey: "@Options.Value.ApiKey",
            apiUrl: "@Options.Value.ApiUrl"
        });

        // sign in begin
        await p.stepup({ signinMethod: { userId: "@UserId" }})
            .catch(error => console.error(error))
            .then(async data => {
                const stepUpResponse = await fetch('/account/stepup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        stepUpToken: data.token,
                        purpose: "@Purpose"
                    })
                });

                if(stepUpResponse.ok)
                {
                    callback();
                }
            });
    }

    document.getElementById("delete-form").addEventListener("submit", (e) => {
        e.preventDefault();
        @{
            if (!UserHasClaim)
            {
                @:stepup(() => { e.target.submit();} );
            }
        else
            {
                @:e.target.submit();
            }
        }
    });
</SecureScript>

<Page Title="Organization Settings">
    <Panel Header="Delete Organization">
        @if (CanDelete)
        {
            <ConfirmEditForm id="delete-form" EditContext="@_deleteOrgEditContext" FormName="@DeleteOrgFormName" OnValidSubmit="@OnSubmitAsync">
                <p class="font-bold">In order to perform this action, you will have to re-authenticate.</p>
                <p>Unexpected bad things will happen if you donâ€™t read this:</p>
                <ul role="list" class="list-disc list-inside">
                    <li>Active subscriptions will be canceled and will not be automatically renewed.</li>
                    <li>This will permanently delete the organization <strong>'@OrganizationName'</strong>.</li>
                    <li>All related data to the organization will be deleted: Settings, developer logs or any related event logs.</li>
                </ul>
                <div class="flex rounded-md">
                    <InputText @bind-Value="@FormModel.OrganizationName" type="text" class="text-input rounded-r-none font-mono"/>
                    <ConfirmButton
                        ConfirmTitle="Delete Organization"
                        ConfirmDescription="Are you sure you would like to delete your organization? There's no going back."
                        ConfirmButtonText="I'm Sure"
                        class="btn-danger rounded-l-none"
                        type="submit">Delete</ConfirmButton>
                </div>
                <ValidationMessage For="() => FormModel.OrganizationName"></ValidationMessage>
                <p class="italic">Type the name of the organization and click "Delete".</p>
            </ConfirmEditForm>
        }
        else
        {
            <p>Your organization '@(OrganizationName)' has @ApplicationCount application(s) that are active or pending deletion.</p>
            <p>You can only delete an organization when you have no applications.</p>
        }
    </Panel>
</Page>

@code {
    private string OrganizationName { get; set; } = string.Empty;
    private int ApplicationCount { get; set; }
    private bool CanDelete => true;

    private string Purpose { get; set; } = "step-up";
    private string UserId { get; set; }
    private bool UserHasClaim { get; set; }

    private const string DeleteOrgFormName = "delete-org-form";
    
    public class DeleteOrgModel
    {
        [Required]
        public string OrganizationName { get; set; } = string.Empty;
    };

    [SupplyParameterFromForm(FormName = DeleteOrgFormName)]
    public DeleteOrgModel FormModel { get; set; } = new();

    private EditContext _deleteOrgEditContext = null!;
    private ValidationMessageStore _deleteOrgValidationStore = null!;

    protected override async Task OnInitializedAsync()
    {
        _deleteOrgEditContext = new (FormModel);
        _deleteOrgEditContext.OnValidationRequested += HandleValidationRequest;
        _deleteOrgValidationStore = new (_deleteOrgEditContext);
        
        var organization = await DataService.GetOrganizationWithDataAsync();

        OrganizationName = organization.Name;
        ApplicationCount = organization.Applications.Count;

        var user = Accessor.HttpContext!.User;

        UserId = user.GetId();
        UserHasClaim = (await AuthService.AuthorizeAsync(user, CustomPolicy.StepUp)).Succeeded;
    }
    
    private void HandleValidationRequest(object? sender, ValidationRequestedEventArgs e)
    {
        _deleteOrgValidationStore.Clear();

        if (!string.Equals(FormModel.OrganizationName, OrganizationName, StringComparison.Ordinal))
        {
            _deleteOrgValidationStore.Add(() => FormModel.OrganizationName, "Please enter organization name exactly if you would like to delete it.");
        }
    }
    
    private async Task OnSubmitAsync()
    {
        Logger.LogInformation("Org Deleted");
        
        // var user = HttpContextAccessor.HttpContext!.User;
        //
        // var username = user.Identity?.Name ?? throw new InvalidOperationException();
        //
        // var organization = await DataService.GetOrganizationWithDataAsync();
        // var emails = organization.Admins.Select(x => x.Email).Where(x => x is not null)!.ToList<string>();
        // await MailService.SendOrganizationDeletedAsync(organization.Name, emails, username, TimeProvider.GetUtcNow().UtcDateTime);
        //
        // if (organization.HasSubscription)
        // {
        //     var isSubscriptionDeleted = await BillingService.CancelSubscriptionAsync(organization.BillingSubscriptionId!);
        //     if (!isSubscriptionDeleted)
        //     {
        //         Logger.LogError(
        //             "Organization {orgId} tried to cancel subscription {subscriptionId}, but failed.",
        //             organization.Name,
        //             organization.BillingSubscriptionId);
        //         throw new Exception("Failed to cancel subscription.");
        //     }
        // }
        //
        // var isDeleted = await DataService.DeleteOrganizationAsync();
        // if (isDeleted)
        // {
        //     await SignInManager.SignOutAsync();
        // }
        //
        // NavigationManager.Refresh();
    }
}