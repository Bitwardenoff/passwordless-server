@page "/app/{app}/settings/authenticators/manage"
@using Passwordless.Common.Models.Apps
@using Passwordless.Common.Models.MDS

@inherits BaseApplicationPage

@inject IScopedPasswordlessClient PasswordlessClient
@inject ICurrentContext CurrentContext;
@inject NavigationManager NavigationManager;

@if (_isInitialized)
{
    <Page Title="Attestation">
        <Panel Header="Authenticators">
            <EditForm id="filter-form" class="flex flex-col space-y-4" Model="FilterForm" FormName="filter-form">
                <div class="grid grid-cols-2 gap-4">
                    <label>
                        Attestation Types:
                        <InputSelect @bind-Value="FilterForm.AttestationTypes" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            @foreach (var attestationType in AttestationTypes!)
                            {
                                <option value="@attestationType" selected="@FilterForm.AttestationTypes!.Contains(attestationType)">@attestationType</option>
                            }
                        </InputSelect>
                    </label>
                    <label>
                        FIDO2 Certification:
                        <InputSelect @bind-Value="FilterForm.CertificationStatuses" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            @foreach (var certificationLevel in CertificationLevels!)
                            {
                                <option value="@certificationLevel" selected="@FilterForm.CertificationStatuses!.Contains(certificationLevel)">@certificationLevel</option>
                            }
                        </InputSelect>
                    </label>
                </div>
                <div class="flex space-x-4">
                    <button id="search-btn" class="btn-primary" type="submit" name="FilterForm.Action" value="search">Search</button>
                    <button id="reset-btn" class="btn-secondary" type="submit" name="FilterForm.Action" value="reset">Reset</button>
                </div>
            </EditForm>

            <hr/>
            <EditForm id="manage-form" class="flex-col space-y-4" Model="Data" FormName="manage-form">
                <div class="flex space-x-4">
                    <button id="add-manage-btn" class="btn-primary" type="submit" name="ManageForm.Action" value="add">Add authenticator(s)</button>
                    <button id="remove-manage-btn" class="btn-primary" type="submit" name="ManageForm.Action" value="remove">Remove authenticator(s)</button>
                    <button id="clear-selection-manage-btn" class="btn-secondary" type="submit" name="ManageForm.Action" value="reset">Clear selection</button>
                </div>
                <div class="overflow-y-hidden overflow-x-auto table-container">
                    <table class="tbl-default min-w-full">
                        <thead>
                        <tr>
                            <th class="relative px-7 sm:w-12 sm:px-6"></th>
                            <th>Description</th>
                            <th class="hidden xl:table-cell">AaGuid</th>
                            <th>Attestation Types</th>
                            <th>Certification Level</th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                        @if (Data!.Count == 0)
                        {
                            <tr>
                                <td colspan="5">All authenticators are currently allowed.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var item in Data)
                            {
                                <tr class="@item.GetRowClass()">
                                    <td class="relative px-7 sm:w-12 sm:px-6">
                                        <input name="ManageForm.Selected" type="checkbox" value="@item.AaGuid" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"/>
                                    </td>
                                    <td class="w-full max-w-0 py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:w-auto sm:max-w-none sm:pl-0">
                                        @item.Name
                                        <dl class="font-normal xl:hidden">
                                            <dt class="sr-only">AaGuid</dt>
                                            <dd class="mt-1 truncate text-gray-500">@item.AaGuid</dd>
                                        </dl>
                                    </td>
                                    <td class="hidden whitespace-nowrap xl:table-cell">@item.AaGuid</td>
                                    <td class="whitespace-nowrap">
                                        <ul>
                                            @foreach (var type in item.AttestationTypes)
                                            {
                                                <li>@type</li>
                                            }
                                        </ul>
                                    </td>
                                    <td class="whitespace-nowrap">
                                        <ul>
                                            @foreach (var level in item.CertificationStatuses)
                                            {
                                                <li>@level</li>
                                            }
                                        </ul>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>

            </EditForm>
        </Panel>
    </Page>
}

@code {
    private bool _isInitialized;
    
    [SupplyParameterFromForm(FormName = "filter-form")] public FilterViewModel FilterForm { get; set; } = new();
    [SupplyParameterFromForm(FormName = "manage-form")] public ManageViewModel ManageForm { get; set; } = new();
    
    public IEnumerable<string>? AttestationTypes { get; private set; }
    public IEnumerable<string>? CertificationLevels { get; private set; }
    public IReadOnlyCollection<ListViewModel>? Data { get; private set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!CurrentContext.Features.AllowAttestation)
        {
            NavigationManager.NavigateTo($"app/{App}/settings");
            return;
        }
        
        if (FilterForm.Action == "reset") FilterForm = new();
        
        switch (ManageForm.Action)
        {
            case "add":
            {
                var request = new WhitelistAuthenticatorsRequest(ManageForm.Selected);
                await PasswordlessClient.WhitelistAuthenticatorsAsync(request);
                break;
            }
            case "remove":
            {
                var request = new DelistAuthenticatorsRequest(ManageForm.Selected);
                await PasswordlessClient.DelistAuthenticatorsAsync(request);
                break;
            }
            case "reset":
            {
                ManageForm = new();
                break;
            }
        }
        
        AttestationTypes = await PasswordlessClient.GetAttestationTypesAsync();
        CertificationLevels = await PasswordlessClient.GetCertificationStatusesAsync();

        var data = await PasswordlessClient.GetMetaDataStatementEntriesAsync(FilterForm.ToDto());

        var configuredAuthenticatorsRequest = new ConfiguredAuthenticatorRequest(true);
        var allowedAuthenticators = await PasswordlessClient.GetConfiguredAuthenticatorsAsync(configuredAuthenticatorsRequest);
        
        Data = data.Select(x =>
        {
            var viewModel = ListViewModel.FromDto(x);
            viewModel.IsSelected = allowedAuthenticators.Any(c => x.AaGuid == c.AaGuid);
            return viewModel;
        }).ToList();

        _isInitialized = true;
    }

    public class FilterViewModel
    {
        private string[] _attestationTypes = Array.Empty<string>();

        public string[]? AttestationTypes
        {
            get => _attestationTypes;
            set => _attestationTypes = value ?? Array.Empty<string>();
        }
        
        private string[] _certificationStatuses = Array.Empty<string>();
        public string[]? CertificationStatuses
        {
            get => _certificationStatuses;
            set => _certificationStatuses = value ?? Array.Empty<string>();
        }
        
        public string? Action { get; set; }
        
        public EntriesRequest ToDto()
        {
            return new EntriesRequest
            {
                AttestationTypes = AttestationTypes,
                CertificationStatuses = CertificationStatuses
            };
        }
    }

    public class ManageViewModel
    {
        public Guid[] Selected { get; set; } = Array.Empty<Guid>();
        public string? Action { get; set; }
    }

    public record ListViewModel(
        Guid AaGuid,
        string Name,
        IEnumerable<string> CertificationStatuses,
        IEnumerable<string> AttestationTypes)
    {
        public bool IsSelected { get; set; }
        
        public string GetRowClass()
        {
            return IsSelected ? "selected" : string.Empty;
        }

        public static ListViewModel FromDto(EntryResponse dto)
        {
            return new ListViewModel(dto.AaGuid, dto.Name, dto.CertificationStatuses, dto.AttestationTypes);
        }
    }
}