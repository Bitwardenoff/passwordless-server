@page "/app/{app}/settings/authenticators/manage"
@using Passwordless.AdminConsole.Services
@using Passwordless.Common.Models.MDS

@inherits BaseApplicationPage

@inject IScopedPasswordlessClient PasswordlessClient

@if (_isInitialized)
{
    <Page Title="Attestation">
        <Panel Header="Authenticators">
            <EditForm id="filter-form" class="flex flex-col space-y-4" Model="FilterForm" FormName="filter-form">
                <div class="grid grid-cols-2 gap-4">
                    <label>
                        Attestation Types:
                        <InputSelect @bind-Value="FilterForm!.AttestationTypes" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            @foreach (var attestationType in _attestationTypes!)
                            {
                                <option value="@attestationType" selected="@FilterForm.AttestationTypes!.Contains(attestationType)">@attestationType</option>
                            }
                        </InputSelect>
                    </label>
                    <label>
                        FIDO2 Certification:
                        <InputSelect @bind-Value="FilterForm!.CertificationStatuses" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            @foreach (var certificationLevel in _certificationLevels!)
                            {
                                <option value="@certificationLevel" selected="@FilterForm.CertificationStatuses!.Contains(certificationLevel)">@certificationLevel</option>
                            }
                        </InputSelect>
                    </label>

                </div>
                <div class="flex space-x-4">
                    <button id="search-btn" class="btn-primary" type="submit" name="filter-form" value="search">Search</button>
                    <button id="reset-btn" class="btn-secondary" type="submit" name="filter-form" value="reset">Reset</button>
                </div>
            </EditForm>

            <hr/>
            <EditForm id="manage-form" class="mt-8 flow-root" Model="Data" FormName="manage-form" OnValidSubmit="OnValidManageForm">
                <div class="flex space-x-4">
                    <button id="save-btn" class="btn-primary" type="submit" name="manage-form" value="save">Save</button>
                    <button id="reset-btn" class="btn-secondary" type="submit" name="manage-form" value="reset">Reset</button>
                </div>
                <div class="overflow-y-hidden overflow-x-auto table-container">
                    <table class="tbl-default min-w-full">
                        <thead>
                        <tr>
                            <th scope="col" class="relative px-7 sm:w-12 sm:px-6"></th>
                            <th scope="col" class="px-3 py-3.5 text-left text-xs font-semibold text-gray-900">Description</th>
                            <th scope="col" class="hidden px-3 py-3.5 text-left text-xs font-semibold text-gray-900 xl:table-cell">AaGuid</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-xs font-semibold text-gray-900">Attestation Types</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-xs font-semibold text-gray-900">Certification Level</th>
                        </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                        @foreach (var item in Data)
                        {
                            <tr>
                                <td class="relative px-7 sm:w-12 sm:px-6">
                                    <input name="ManageForm.Displayed" type="hidden" value="@item.AaGuid" />
                                    <input name="ManageForm.Selected" type="checkbox" checked="@item.IsSelected" value="@item.AaGuid" class="absolute left-4 top-1/2 -mt-2 h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600" />
                                </td>
                                <td class="w-full max-w-0 py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:w-auto sm:max-w-none sm:pl-0">
                                    @item.Name
                                    <dl class="font-normal xl:hidden">
                                        <dt class="sr-only">AaGuid</dt>
                                        <dd class="mt-1 truncate text-gray-500">@item.AaGuid</dd>
                                    </dl>
                                </td>
                                <td class="hidden whitespace-nowrap px-3 py-4 text-xs text-gray-500 xl:table-cell">@item.AaGuid</td>
                                <td class="whitespace-nowrap px-3 py-4 text-xs text-gray-500">
                                    <ul>
                                        @foreach (var type in item.AttestationTypes)
                                        {
                                            <li>@type</li>
                                        }
                                    </ul>
                                </td>
                                <td class="whitespace-nowrap px-3 py-4 text-xs text-gray-500">
                                    <ul>
                                        @foreach (var level in item.CertificationStatuses)
                                        {
                                            <li>@level</li>
                                        }
                                    </ul>
                                </td>
                            </tr>
                        }

                        </tbody>
                    </table>
                </div>

            </EditForm>
        </Panel>
    </Page>
}

@code {
    private bool _isInitialized;
    
    [SupplyParameterFromForm(FormName = "filter-form")] public FilterViewModel? FilterForm { get; set; } = new();
    [SupplyParameterFromForm(FormName = "manage-form")] public ManageViewModel? ManageForm { get; set; } = new();
    
    private IEnumerable<string>? _attestationTypes;
    private IEnumerable<string>? _certificationLevels;
    public IEnumerable<ListViewModel>? Data { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _attestationTypes = await PasswordlessClient.GetAttestationTypesAsync();
        _certificationLevels = await PasswordlessClient.GetCertificationStatusesAsync();

        var data = await PasswordlessClient.GetMetaDataStatementEntriesAsync(FilterForm!.ToDto());
        
        Data = data.Select(ListViewModel.FromDto);

        _isInitialized = true;
    }

    public class FilterViewModel
    {
        private string[] _attestationTypes = Array.Empty<string>();

        public string[]? AttestationTypes
        {
            get => _attestationTypes;
            set => _attestationTypes = value ?? Array.Empty<string>();
        }
        
        private string[] _certificationStatuses = Array.Empty<string>();
        public string[]? CertificationStatuses
        {
            get => _certificationStatuses;
            set => _certificationStatuses = value ?? Array.Empty<string>();
        }
        
        public EntriesRequest ToDto()
        {
            return new EntriesRequest
            {
                AttestationTypes = AttestationTypes,
                CertificationStatuses = CertificationStatuses
            };
        }
    }

    public class ManageViewModel
    {
        public Guid[] Displayed { get; set; } = Array.Empty<Guid>();
        public Guid[] Selected { get; set; } = Array.Empty<Guid>();

        public IEnumerable<Guid> GetSelected()
        {
            return Displayed.Where(x => Selected.Contains(x));
        }
    }

    public class ListViewModel
    {
        public Guid AaGuid { get; init; }
        public string Name { get; init; }
        public IEnumerable<string> CertificationStatuses { get; init; }
        public IEnumerable<string> AttestationTypes { get; init; }
        public bool IsSelected { get; set; }

        public static ListViewModel FromDto(EntryResponse dto)
        {
            return new ListViewModel
            {
                AaGuid = dto.AaGuid,
                Name = dto.Name,
                CertificationStatuses = dto.CertificationStatuses,
                AttestationTypes = dto.AttestationTypes
            };
        }
    }

    private void OnValidManageForm()
    {
        // todo
    }

}