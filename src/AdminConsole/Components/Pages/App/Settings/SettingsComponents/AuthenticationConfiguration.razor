@using Humanizer
@using Passwordless.AdminConsole.Helpers
@using System.Collections.Immutable
@using Passwordless.Service.Models
@inject ICurrentContext CurrentContext;
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor HttpContextAccessor;
@inject IScopedPasswordlessClient Passwordless;

@if (!CurrentContext.IsPendingDelete)
{
    <Panel Header="Authentication Configuration">
        <p>List of configurations for your authentication tokens. Read more in the <a class="link-blue underline" href="https://docs.passwordless.dev/guide/admin-console/applications.html#authentiation-configurations">docs</a></p>

        <a class="btn-primary" href="/app/@(AppId)/settings/authentication-configuration/new">Add New Authentication Configuration</a>

        <Table ColumnHeaders="@(new[] { "Purpose", "User Verification", "Time To Live", "Actions" })">
            @if (Configurations.Any())
            {
                @foreach (var config in Configurations)
                {
                    <tr>
                        <td>@config.Purpose</td>
                        <td>@config.UserVerification</td>
                        <td>@config.TimeToLive</td>
                        <td class="flex space-x-2 ml-0">
                            <a href="/app/@(AppId)/settings/authentication-configuration/@(config.Purpose)/edit">
                                <PencilSquareIcon Class="h-6 w-6"></PencilSquareIcon>
                            </a>

                            @if (config.CanDelete)
                            {
                                <ConfirmEditForm Model="ConfirmSelectedForm" FormName="@nameof(ConfirmSelectedForm)" name="@nameof(ConfirmSelectedForm)" OnSubmit="OnSelectedFormConfirmed">
                                    <ConfirmButton
                                        ConfirmTitle="Delete Authentication Configuration"
                                        ConfirmDescription="Are you sure you want to delete this configuration?"
                                        ConfirmButtonText="Delete"
                                        class="btn-danger flex items-center"
                                        name="delete"
                                        type="submit"
                                        value="delete">
                                        <DeleteIcon Class="h-6 w-6"></DeleteIcon>
                                    </ConfirmButton>
                                    <input type="hidden" value="@config.Purpose" name="ConfirmSelectedForm.Purpose"/>
                                </ConfirmEditForm>
                            }
                        </td>
                    </tr>
                }
            }
        </Table>
    </Panel>
}

@code {
    private string AppId => CurrentContext.AppId!;

    public ConfirmSelectedFormModel ConfirmSelectedForm { get; set; } = new();

    private readonly IReadOnlyCollection<string> _requiredAuthenticationConfigurationNames = new[] { SignInPurposes.SignInName, SignInPurposes.StepUpName };

    private IReadOnlyCollection<AuthenticationConfigurationEntry> Configurations { get; set; } = Array.Empty<AuthenticationConfigurationEntry>();

    public record AuthenticationConfigurationEntry(string Purpose, string UserVerification, string TimeToLive, bool CanDelete);

    private AuthenticationConfigurationEntry GetEntry(Common.Models.Apps.AuthenticationConfiguration configuration) =>
        new(configuration.Purpose,
            configuration.UserVerificationRequirement,
            TimeSpan.FromSeconds(configuration.TimeToLive).Humanize(),
            _requiredAuthenticationConfigurationNames.All(x => !string.Equals(x, configuration.Purpose, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        if (CurrentContext.IsPendingDelete) return;

        if (HttpContextAccessor.IsRazorPages() && HttpContextAccessor.HttpContext!.Request.HasFormContentType)
        {
            var request = HttpContextAccessor.HttpContext!.Request;
            switch (request.Form["_handler"])
            {
                case nameof(ConfirmSelectedForm):
                    ConfirmSelectedForm.Purpose = request.Form["ConfirmSelectedForm.Purpose"].ToString();
                    await OnSelectedFormConfirmed();
                    break;
            }
        }

        Configurations = (await Passwordless.GetAuthenticationConfigurationsAsync()).Scopes.Select(GetEntry).ToImmutableArray();
    }

    public async Task OnSelectedFormConfirmed()
    {
        await Passwordless.DeleteAuthenticationConfigurationAsync(ConfirmSelectedForm.Purpose);
        
        NavigationManager.NavigateTo($"app/{CurrentContext.AppId}/settings");
    }

    public class ConfirmSelectedFormModel
    {
        public string Purpose { get; set; } = string.Empty;
    }

}