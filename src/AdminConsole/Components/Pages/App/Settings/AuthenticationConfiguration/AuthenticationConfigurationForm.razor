@using Fido2NetLib.Objects
@inherits BaseRazorComponent

@inject ILogger<AuthenticationConfigurationForm> Logger
@inject IScopedPasswordlessClient Passwordless
@inject ICurrentContext CurrentContext

<EditForm Model="FormModel" OnValidSubmit="SubmitAsync" FormName="@FormName">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div>
        <label class="">Purpose:</label>
        <InputText @bind-Value="@FormModel!.Purpose" disabled="@DisablePurpose" class=""/>
    </div>
    <div>
        <label class="">User Verification:</label>
        <InputSelect id="userVerification" @bind-Value="@FormModel.UserVerificationRequirement" TValue="UserVerificationRequirement" class="single-select">
            @foreach (var uv in Enum.GetValues(typeof(UserVerificationRequirement)))
            {
                <option value="@uv">@uv</option>
            }
        </InputSelect>
    </div>
    <div>
        <label class="">Seconds:</label>
        <InputNumber id="seconds" @bind-Value="@FormModel.Seconds" min="0" class=""/>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [Parameter] 
    public EventCallback<AuthenticationConfigurationFormModel> OnSubmitFunction { get; set; }
    
    [Parameter]
    public AuthenticationConfigurationFormModel? Model { get; set; }
    
    [Parameter]
    public bool DisablePurpose { get; set; }
    
    
    [SupplyParameterFromForm]
    public AuthenticationConfigurationFormModel? FormModel { get; set; }

    private const string FormName = "AuthenticationConfigurationForm";
    
    protected override void OnInitialized()
    {
        if (Model is not null && FormModel is null) FormModel = Model;

        if (FormModel is not null) return;

        FormModel = new();
    }

    private async Task SubmitAsync()
    {
        await OnSubmitFunction.InvokeAsync(FormModel);
    }
}