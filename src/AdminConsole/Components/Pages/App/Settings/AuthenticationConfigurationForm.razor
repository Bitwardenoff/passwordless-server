@using Passwordless.AdminConsole.Helpers
@using Passwordless.Helpers.Extensions
@using Fido2NetLib.Objects
@using System.ComponentModel.DataAnnotations
@using Passwordless.Common.Models.Apps
@inherits BaseRazorComponent
@inject IScopedPasswordlessClient Passwordless

<EditForm Model="Form"
          OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator/>
    <label for="purpose">
        Purpose: <InputText id="purpose" @bind-value="Form.Purpose"/>
    </label>
    <label for="userVerification">
        Purpose:
        <InputSelect id="userVerification" @bind-value="Form.UserVerificationRequirement">
            @foreach (var uv in Enum.GetValues(typeof(UserVerificationRequirement)))
            {
                <option value="@uv">@uv</option>
            }
        </InputSelect>
    </label>

    <button class="btn btn-primary">Save</button>
</EditForm>

@code {
    public AuthenticationConfigurationFormModel Form { get; set; }

    public class AuthenticationConfigurationFormModel
    {
        [Required, MinLength(1)] public required string Purpose { get; set; }

        [Required] public UserVerificationRequirement UserVerificationRequirement { get; set; } = UserVerificationRequirement.Preferred;

        [Required, Range(0, int.MaxValue)] public int Seconds { get; set; }
        [Required, Range(0, int.MaxValue)] public int Minutes { get; set; }
        [Required, Range(0, int.MaxValue)] public int Hours { get; set; }
        [Required, Range(0, int.MaxValue)] public int Days { get; set; }

        public TimeSpan TimeToLive => new TimeSpan()
            .AddSeconds(Seconds)
            .AddMinutes(Minutes)
            .AddHours(Hours)
            .AddDays(Days);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public Task OnValidSubmitAsync()
    {
        return Passwordless.SaveAuthenticationConfiguration(
            new AuthenticationConfiguration(    
                Form.Purpose, 
                Form.TimeToLive.TotalSeconds.Pipe(Convert.ToInt32), 
                nameof(Form.UserVerificationRequirement)));
    }

}