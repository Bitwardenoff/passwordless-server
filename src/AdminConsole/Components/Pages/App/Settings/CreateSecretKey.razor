@page "/app/{AppId}/settings/create-secret-key"

@using Passwordless.AdminConsole.Components.Pages.App.Settings.SettingsComponents
@using Passwordless.AdminConsole.EventLog.DTOs
@using Passwordless.AdminConsole.EventLog.Loggers
@using Passwordless.AdminConsole.Helpers
@using Passwordless.AdminConsole.Services.PasswordlessManagement
@using Passwordless.Common.Constants
@using Passwordless.Common.EventLog.Enums
@using Passwordless.Common.Extensions
@using Passwordless.Common.Models.Apps

@inherits BaseApplicationPage

@inject IPasswordlessManagementClient ManagementClient
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IEventLogger EventLogger
@inject ILogger<CreatePublicKey> Logger

<Page Title="Create Secret Key">
    <CreateApiKeyComponent Scopes="@Scopes" OnCreateClicked="@OnCreatedAsync" />
</Page>

@code {
    public IReadOnlyCollection<string>? Scopes { get; private set; }
    
    public int OrganizationId { get; private set; }

    protected override void OnInitialized()
    {
        Scopes = Enum.GetValues(typeof(SecretKeyScopes)).Cast<SecretKeyScopes>().Select(x => x.GetValue()).ToArray();
        OrganizationId = HttpContextAccessor.HttpContext!.User.GetOrgId() ?? throw new ArgumentNullException(nameof(OrganizationId));
       
    }

    public async Task OnCreatedAsync(List<string> selectedScopes)
    {
        var selectedScopeValues = selectedScopes
            .Select(x => x.AsSecretKeyScope())
            .ToHashSet();

        try
        {
            var request = new CreateSecretKeyRequest(selectedScopeValues);
            await ManagementClient.CreateApiKeyAsync(AppId, request);

            var eventDto = new OrganizationEventDto(HttpContextAccessor.HttpContext!.Request.HttpContext.User.GetId(),
                EventType.AdminApiKeyCreated,
                $"Created secret key for application {AppId}.",
                Severity.Informational,
                AppId,
                HttpContextAccessor.HttpContext!.User.GetOrgId() ?? throw new ArgumentException("The organization ID is missing."),
                DateTime.UtcNow);
            EventLogger.LogEvent(eventDto);

            NavigationManager.NavigateTo($"/app/{AppId}/settings");
        }
        catch (Exception)
        {
            Logger.LogError("Failed to create secret key for application: {appId}", AppId);
        }
    }
}